---
name: 📦 Publish to PyPI

"on":
  release:
    types: [published]
  workflow_dispatch:  # Allow manual trigger for testing

env:
  PYTHON_VERSION: "3.9"

jobs:
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📋 Get version from pyproject.toml
        id: get-version
        run: |
          pip install tomli
          VERSION=$(python -c "import tomli; \
            print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: 🏷️ Validate version matches tag
        if: github.event_name == 'release'
        run: |
          TAG_VERSION="${{ github.event.release.tag_name }}"
          PACKAGE_VERSION="${{ steps.get-version.outputs.version }}"

          # Remove 'v' prefix from tag if present
          TAG_VERSION=${TAG_VERSION#v}

          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "Tag version: $TAG_VERSION"
            echo "Package version: $PACKAGE_VERSION"
            exit 1
          fi

          echo "✅ Version validation passed: $PACKAGE_VERSION"

  build-and-publish:
    name: 🏗️ Build & Publish to PyPI
    runs-on: ubuntu-latest
    needs: validate-release
    environment: pypi-publishing  # Protected environment

    permissions:
      id-token: write  # Required for trusted publishing (optional, but recommended)
      contents: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: 🏗️ Build package
        run: |
          python -m build

      - name: ✅ Verify package contents
        run: |
          echo "📋 Package contents:"
          ls -la dist/

          echo "🔍 Package metadata:"
          twine check dist/*

          echo "📄 Wheel contents:"
          python -m zipfile -l dist/*.whl

      - name: 🧪 Test installation in clean environment
        run: |
          python -m venv test_env
          source test_env/bin/activate
          pip install dist/*.whl
          
          # Test that the package can be imported
          python -c "import src; print('✅ Package imports successfully')"
          
          # Test CLI command
          cylestio-perimeter --help || \
            echo "⚠️  CLI command test failed (may be expected)"

      - name: 🚀 Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "🚀 Publishing cylestio-perimeter v${VERSION} to PyPI..."
          twine upload dist/*

      - name: 🎉 Success notification
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "🎉 Successfully published cylestio-perimeter v${VERSION} to PyPI!"
          echo "📦 Package available at: https://pypi.org/project/cylestio-perimeter/"
          echo "💾 Install with: pip install cylestio-perimeter==${VERSION}"

  verify-pypi-deployment:
    name: 🔍 Verify PyPI Deployment
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-publish]

    steps:
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⏳ Wait for PyPI propagation
        run: |
          echo "⏳ Waiting 60 seconds for PyPI to propagate the new version..."
          sleep 60

      - name: 📦 Test installation from PyPI
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "🔍 Testing installation from PyPI..."
          pip install cylestio-perimeter==${VERSION}
          
          # Verify the package was installed correctly
          python -c "
          import pkg_resources
          version = pkg_resources.get_distribution('cylestio-perimeter').version
          expected = '${VERSION}'
          assert version == expected, f'Version mismatch: got {version}, expected {expected}'
          print(f'✅ Successfully verified installation of cylestio-perimeter v{version} from PyPI')
          "

      - name: 🎯 Final verification
        run: |
          echo "✅ PyPI deployment verification completed successfully!"
          echo "🌐 Package is now available for public installation"
