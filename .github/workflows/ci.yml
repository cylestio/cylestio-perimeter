name: 🧪 CI Pipeline

on:
  push:
    branches: [main, develop, security-scans]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"

jobs:
  quality-checks:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🎨 Code formatting with Black
        run: |
          black --check --diff src/ tests/

      - name: 📐 Import sorting with isort
        run: |
          isort --check-only --diff src/ tests/

      - name: 🔍 Linting with Ruff
        run: |
          ruff check src/ tests/

      - name: 🏷️ Type checking with MyPy
        run: |
          mypy src/ --ignore-missing-imports

  tests:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🧪 Run tests with pytest
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term-missing

      - name: 📊 Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [quality-checks, tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: 🏗️ Build package
        run: |
          python -m build

      - name: ✅ Check package
        run: |
          twine check dist/*

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package-${{ github.sha }}
          path: dist/

  integration-tests:
    name: 🔄 Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🔄 Run integration tests
        run: |
          pytest tests/integration/ -v

      - name: 🐳 Test Docker build
        run: |
          docker build -t cylestio-gateway:test .
          docker run --rm cylestio-gateway:test python -c "import src; print('✅ Package imports successfully')"
